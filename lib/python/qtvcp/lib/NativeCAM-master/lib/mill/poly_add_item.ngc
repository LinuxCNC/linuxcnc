o<poly_add_item> sub
(author : Fernand Veilleux)
(CALL type[1], x[2], y[3], dir[4], corner style[5], corner radius[6], complementary[7], tool engagement[8], radius or angle[9], flipped or offsets[10] for type 4 to 7)
;types :
; -1 = init and set origin
; -3 = mirror all previous items backward -4 = create arc connector to mirror line
; line to : 0 = rel, 1 = abs, 10 = X relative, Y absolute, 11 = X absolute, Y relative
; line polar : 2 = abs, 3 = rel w/ prev chord/line, 30 = rel w/ prev arc ctr if so
; arc to coords : 4 = abs, 5 = relative or polar
; arc ij : 6 = relative to start, 7 = absolute from center
; arc w/ ctr at polar : 8 = abs, 9 = rel w/ prev chord/line, 10 = rel w/ prev arc ctr if so
; arc mirrored end with ctr at : 14 = relative to start, 15 = absolute
; type 1 or 5 used in closing

(polydata = x, y, dir, cx, cy, phi-prev, phi-ctr, corner style, corner radius, complementary, tool engagement)
(polyline items record start at 4982 downward)
;(print,#1, #2, #3, #4, #5, #6, #7, #8)
;(print,#9, #10, #11, #12)

	o11 if [[#1 EQ -1]] (init line)
		#5000 = 0
		#4999 = 0
		#4998 = 0
		#4997 = 0
		#4996 = 0
		#4995 = 0
		#4994 = #3
		#4993 = #2
		o<poly_add_item> return
	o11 else
		#<ptr>     = [4982 - #5000 * 11]
		#<prev_x>  = #[#<ptr> + 11]
		#<prev_y>  = #[#<ptr> + 12]
		#<prev_d>  = #[#<ptr> + 13]
		#<prev_ph> = #[#<ptr> + 16] (previous line or cord phi)
		#<prev_rh> = #[#<ptr> + 17] (previous radius phi id prev_d == 2 or 3)
	o11 endif

	(calc new x = #60, y = #61, cx = #62, cy = #63)
	#62 = 0
	#63 = 0

	o<if01> if [[#1 EQ 0] OR [#1 EQ 2]] (line rel or polar absolute)
		#60 = [#<prev_x> + #2]
		#61 = [#<prev_y> + #3]

	o<if01> elseif [#1 EQ 10] (X rel, Y abs)
		#60 = [#<prev_x> + #2]
		#61 = #3

	o<if01> elseif [#1 EQ 11] (X abs, Y rel)
		#60 = #2
		#61 = [#<prev_y> + #3]
		
	o<if01> elseif [#1 EQ 3] (polar line relative w/ prev chord/line)
		o<rotate_xy> CALL [#<prev_x> + #2] [#<prev_y> + #3] [#<prev_x>] [#<prev_y>] [#<prev_ph>] [0] [60] [61]

	o<if01> elseif [#1 EQ 30] (polar relative)
		o14 if [[#<prev_d> EQ 2] OR [#<prev_d> EQ 3]]
			o<rotate_xy> CALL [#<prev_x> + #2] [#<prev_y> + #3] [#<prev_x>] [#<prev_y>] [#<prev_rh>] [0] [60] [61]
		o14 else
			o<rotate_xy> CALL [#<prev_x> + #2] [#<prev_y> + #3] [#<prev_x>] [#<prev_y>] [#<prev_ph>] [0] [60] [61]
		o14 endif

	o<if01> elseif [[#1 EQ 4] OR [#1 EQ 5] OR [#1 EQ 41] OR [#1 EQ 42]]
			(arc to coords or polar #9 = radius or chord height,  #10= what is #9, #11 = flipped)
			()
		o<if03> if [#1 EQ 4] (relative)
			#60 = [#<prev_x> + #2]
			#61 = [#<prev_y> + #3]
		o<if03> elseif [#1 EQ 5] (absolute)
			#60 = #2
			#61 = #3
		o<if03> elseif [#1 EQ 41] (X rel, Y abs)
			#60 = [#<prev_x> + #2]
			#61 = #3
		o<if03> elseif [#1 EQ 42] (X abs, Y rel)
			#60 = #2
			#61 = [#<prev_y> + #3]
		o<if03> endif

		o<line> CALL [#60] [#61] [#<prev_x>] [#<prev_y>]
		#<mid_x> = [[#<prev_x> + #60] / 2]
		#<mid_y> = [[#<prev_y> + #61] / 2]
		o<select> CALL [43] [#11] [90] [270]
		
		o<check1> if [#10 EQ 0] (radius is defined)
			o23 if [#<_line_len> GE [#9 * 2]]
				#4 = 1
				#25 = [#<_line_len> / 2]
				(print,)
				(print,changed arc to line : length of #9 units is too short for radius, it needs to be greater than #25)
			o23 else
				#<bside> = SQRT[[#9 * #9] - [[#<_line_len> / 2] * [#<_line_len> / 2]]]
				o<rotate_xy> CALL [#<mid_x> + #<bside>] [#<mid_y>] [#<mid_x>] [#<mid_y>] [#<_line_phi> + #43] [0] [62] [63]
			o23 endif
		o<check1> else (arc height is defined)
			o<rotate_xy> CALL [#<mid_x> + #9] [#<mid_y>] [#<mid_x>] [#<mid_y>] [#<_line_phi> + #43] [0] [48] [49]
			#<m1_x> = [[#<prev_x> + #48] / 2]
			#<m1_y> = [[#<prev_y> + #49] / 2]
			o<rotate_xy> CALL [#48] [#49] [#<m1_x>] [#<m1_y>] [90]
			o<isect_lines> CALL [#<m1_x>] [#<m1_y>] [#<_rotated_x>] [#<_rotated_y>] [#<mid_x>] [#<mid_y>] [#48] [#49] [0] [0] [62] [63]
		o<check1> endif

	o<if01> elseif [[#1 EQ 6] OR [#1 EQ 7] OR [#1 EQ 61] OR [#1 EQ 62]]
			(arc ij w/ cx,cy : 6 = relative to start, 7 = absolute, 61 = X off, Y abs  62 = X abs, Y off)
		o18 if [#1 EQ 6]
			#62 = [#<prev_x> + #2]
			#63 = [#<prev_y> + #3]
		o18 elseif [#1 EQ 7]
			#62 = #2
			#63 = #3
		o18 elseif [#1 EQ 61]
			#62 = [#<prev_x> + #2]
			#63 = #3
		o18 elseif [#1 EQ 62]
			#62 = #2
			#63 = [#<prev_y> + #3]
		o18 endif
		
		o<if06> if [#10 EQ 1]
			o<line> CALL [#62] [#63] [#<prev_x>] [#<prev_y>]
			o<rotate_xy> CALL [#62 + #<_line_len>] [#63] [#62] [#63] [#9] [0] [60] [61]
		o<if06> elseif [#4 EQ 2]
			o<rotate_xy> CALL [#<prev_x>] [#<prev_y>] [#62] [#63] [-#9] [0] [60] [61]
		o<if06> else
			o<rotate_xy> CALL [#<prev_x>] [#<prev_y>] [#62] [#63] [#9] [0] [60] [61]
		o<if06> endif

	o<if01> elseif [[#1 GE 8] AND [#1 LE 10]] (arc polar w/ ctr at angle : 8 = abs, 9 = rel w/ prev chord/line, 10 = rel w/ prev arc ctr )
		o<if07> if [#1 EQ 8] (absolute)
			o<rotate_xy> CALL [#<prev_x> + #2] [#<prev_y>] [#<prev_x>] [#<prev_y>] [#3] [0] [62] [63]
		o<if07> elseif [#1 EQ 9]
			o<rotate_xy> CALL [#<prev_x> + #2] [#<prev_y>] [#<prev_x>] [#<prev_y>] [#<prev_ph> + #3] [0] [62] [63]
		o<if07> else
;			o15 if [[#<prev_d> EQ 2] OR [#<prev_d> EQ 3]]
				o<rotate_xy> CALL [#<prev_x> + #2] [#<prev_y>] [#<prev_x>] [#<prev_y>] [#<prev_rh> + #3] [0] [62] [63]
;			o15 else
;				o<rotate_xy> CALL [#<prev_x> + #2] [#<prev_y>] [#<prev_x>] [#<prev_y>] [#<prev_ph> + #3] [0] [62] [63]
;			o15 endif
		o<if07> endif

		o<if068> if [#10 EQ 1] (end at abs)
			o<rotate_xy> CALL [#62 + #2] [#63] [#62] [#63] [#9] [0] [60] [61]
		o<if068> else
			o16 if [#4 EQ 2]
				o<rotate_xy> CALL [#<prev_x>] [#<prev_y>] [#62] [#63] [-#9] [0] [60] [61]
			o16 else
				o<rotate_xy> CALL [#<prev_x>] [#<prev_y>] [#62] [#63] [#9] [0] [60] [61]
			o16 endif
		o<if068> endif

	o<if01> elseif [[#1 EQ 14] OR [#1 EQ 15]] (mirrored, ctr at : 14 = relative to start, 15 = absolute)
		o19 if [#1 EQ 14] (rel coords)
			#62 = [#<prev_x> + #2]
			#63 = [#<prev_y> + #3]
		o19 else
			#62 = #2
			#63 = #3
		o19 endif
		
		o20 if  [[[#62 EQ #<prev_x>] AND [#63 EQ #<prev_y>]] OR [[#9 EQ #<prev_x>] AND [#10 EQ #<prev_y>]] OR [[#62 EQ #9] AND [#63 EQ #10]]]
			o<poly_add_item> return
		o20 endif
		
		o<angle> CALL [#<prev_x>] [#<prev_y>] [#62] [#63] [#9] [#10] ;[1]
		o21 if [ABS[#<_angle_sin21>] LT 0.98]
			o<rotate_xy> CALL [#<prev_x>] [#<prev_y>] [#62] [#63] [[#<_angle_phi23> - #<_angle_phi21>] * 2] [0] [60] [61]
		o21 else
			o<rotate_xy> CALL [#<prev_x>] [#<prev_y>] [#9] [#10] [[#<_angle_phi23> - #<_angle_phi13>] * 2] [0] [60] [61]
		o21 endif

	/	o24 if [#11]
	/		G0 X#62 Y#63
	/		G1 X#9  Y#10
	/	o24 endif
		
	o<if01> elseif [#1 EQ -2] (mirror items)
		o<line> CALL [#2] [#3] [#9] [#10] [0]
		#25 = #<_line_phi>

		(find perpendicular point from prev_x, prev_y to mirror line)
		o<line> CALL [#<prev_x>] [#<prev_y>] [#9] [#10] [0]
		#26 = [SIN[#<_line_phi> - #25] * #<_line_len>]
		o<rotate_xy> CALL [#<prev_x> + #26] [#<prev_y>] [#<prev_x>] [#<prev_y>] [#25 + 90] [0] [45] [46]

		o12 if [#4 EQ 1] (add a straight line)
			o<poly_add_item> CALL [1] [#45] [#46] [#4] [#5] [#6] [#7] [#8]
		o12 else
			o<line> CALL [#<prev_x>] [#<prev_y>] [#45] [#46] [0]
			#<rad_1> = [[SQRT[#<_line_len> * #<_line_len> + #11 * #11] / 2] / COS[ATAN[#<_line_len>] / [#11]]]
			o<select> CALL [47] [#4 - 2] [- 90] [90]
			o<rotate_xy> CALL [#45 + #11] [#46] [#45] [#46] [#<_line_phi> - #47] [0] [45] [46] (x, y)
			o<rotate_xy> CALL [#45 + #<rad_1>] [#46] [#45] [#46] [#<_line_phi> + #47] [0] (cx, cy)
			o<poly_add_item> CALL [1] [#45] [#46] [#4] [#5] [#6] [#7] [#8] [#<_rotated_x>] [#<_rotated_y>]
		o12 endif

		(add a flag for poly_create)
		o<poly_add_item> CALL [-3] [#2] [#3] [-3] [0] [0] [0] [0] [#9] [#10]

		(calc mirror point of origin x, y)
		o<line> CALL [#4993] [#4994] [#2] [#3] ;[18]
		o<rotate_xy> CALL [#4993] [#4994] [#2] [#3] [[#25 - #<_line_phi>] * 2] [0] [45] [46]
		
		(calc mirror point of origin cx, cy)
		o<line> CALL [#4985] [#4986] [#2] [#3] ;[18]
		o<rotate_xy> CALL [#4985] [#4986] [#2] [#3] [[#25 - #<_line_phi>] * 2] [0] [47] [48]

		#28 = [180 + #25 * 2 - #4987]
		(if arc, calc angle of x,y / cx,cy)
		o22 if [#4984 GT 1]
			o<line> CALL [#45] [#46] [#47] [#48] ;[18]
			#29 = #<_line_phi>
		o22 else
			#29 = #28
		o22 endif
		
		o<poly_add_item> CALL [-3] [#45] [#46] [#4984] [0] [0] [0] [0] [#47] [#48] [#28] [#29]

		o<poly_add_item> return
		
	o<if01> elseif [#1 EQ -3] (add data and flag to mirror items)
		#[#<ptr>    ] =  #2 (x)
		#[#<ptr> + 1] =  #3 (y)
		#[#<ptr> + 2] =  #4 (dir)
		#[#<ptr> + 3] =  #9 (cx)
		#[#<ptr> + 4] = #10 (cy)
		#[#<ptr> + 5] = #11 (prv phi)
		#[#<ptr> + 6] = #12 (radius phi)

	o<if01> else (absolute, everything allready calculated)
		#60    = #2
		#61    = #3
		#62    = #9
		#63    = #10
	o<if01> endif

	o<validity_1> if [[#1 GT -1] AND [#<prev_x> EQ #60] AND [#<prev_y> EQ #61]]
;		(debug,polyline: begin and end positions are the same - EXITING)
;		(print,polyline: begin and end positions are the same - EXITING)
;		(AXIS,notify,polyline: begin and end positions are the same - EXITING)
		o<poly_add_item> return
	o<validity_1> endif

	o<if04> if [[#5 EQ 0] OR [#6 EQ 0]] (make sure no style)
		#5 = 0
		#6 = 0
	o<if04> endif

	o17 if [#1 GE 0]
		#[#<ptr>     ] =  #60 (x)
		#[#<ptr> +  1] =  #61 (y)
		#[#<ptr> +  2] =  #4  (dir)
		#[#<ptr> +  3] =  #62 (cx)
		#[#<ptr> +  4] =  #63 (cy)

		o<line> CALL [#60] [#61] [#<prev_x>] [#<prev_y>]
		#24 = #<_line_phi>
		#[#<ptr> +  5] = #24

		o13 if [[#4 EQ 2] OR [#4 EQ 3]]
			o<line> CALL [#60] [#61] [#62] [#63]
			#[#<ptr> + 6] = #<_line_phi>
		o13 else
			#[#<ptr> + 6] = #24
		o13 endif
	o17 endif
	
	#[#<ptr> +  7] =  #5 (corner style)
	#[#<ptr> +  8] =  #6 (corner radius)
	#[#<ptr> +  9] =  #7 (complementary)
	#[#<ptr> + 10] = [#8 / 100] (tool engagement)

	#5000 = [#5000 + 1]
;(print,*******)
;(print,type= #1    X= #60 Y= #61 dir= #4 cx= #62, cy= #63, prv= #24°, ctr= #<_line_phi>°, cs= #5, cr= #6, cmp= #7, eng= #8)
o<poly_add_item> endsub
