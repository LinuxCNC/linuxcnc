(will find exit point to avoid gouging or/and move away from the edge)
(author : Fernand Veilleux)
o<lead_out> sub
(CALL #1 = data ptr)

	#<debug> = 0
	
	o17 if [#<_ccomp> LT 410]
		o<lead_out> return
	o17 endif

	#<out_radius> = [#5410 * #<_out_kerf_factor>] (lead_out radius)
	o15 if [#<out_radius> EQ 0]
		(print,)
		(print,"lead_out" subroutine not executed : kerf width or out_factor at 0.0)
		o<lead_out> return
	o15 endif

	#<last_ptr>  = [#1 + [#[#1] * 8] - 7] (ptr to last record)
	#<from_dir>  = #[#<last_ptr> + 2]
	o16 if [#<from_dir> EQ 0] (last item dir 0 means figure not closed)
		o<lead_out> return
	o16 endif
	
	#<first_ptr> = [#1 + 1]
	#<to_x>      = #[#<first_ptr>]
	#<to_y>      = #[#<first_ptr> + 1]
	#<to_dir>    = #[#<first_ptr> + 2]
	#<to_cx>     = #[#<first_ptr> + 3]
	#<to_cy>     = #[#<first_ptr> + 4]

	#<exit_dir>  = 0
	#<cmp>       = FIX[#<_ccomp> / 10]
	o10 if [#<cmp> LT 41]
		o<lead_out> return
	o10 endif

	o<dbg> if [#<debug>]
		(print,)
		(print,"lead_out CALL",  tracking = #<debug>)
		(print,   current X#<_cut_current_x>, Y#<_cut_current_y>   ptr = #<first_ptr>)
		(print,   next x,y  = #<to_x>, #<to_y>,  dir = #<to_dir>,  cx,cy = #<to_cx>, #<to_cy>)
	o<dbg> endif
		
	o13 if [#<to_dir> EQ 1] (straight)
		o<line> CALL [#<_cut_current_x>] [#<_cut_current_y>] [#<to_x>] [#<to_y>] ;[1]
	o13 elseif [#<to_dir> EQ 2] (cw)
		o<line> CALL [#<_cut_current_x>] [#<_cut_current_y>] [#<to_cx>] [#<to_cy>] ;[2]
		#<_line_phi> = [#<_line_phi> + 90]
	o13 elseif [#<to_dir> EQ 3] (ccw)
		o<line> CALL [#<_cut_current_x>] [#<_cut_current_y>] [#<to_cx>] [#<to_cy>] ;[3]
		#<_line_phi> = [#<_line_phi> - 90]
	o13 endif

	(compute exit points)
	o26 if [#<cmp> EQ 41] (left)
		#<i> = -[#<out_radius> * SIN[#<_line_phi>]]
		#<j> =  [#<out_radius> * COS[#<_line_phi>]]
		#<exit_x> = [#<_cut_current_x> + #<i> + #<j>]
		#<exit_y> = [#<_cut_current_y> - #<i> + #<j>]
		#<exit_dir> = 3
	o26 elseif [#<cmp> EQ 42] (right)
		#<i> =  [#<out_radius> * SIN[#<_line_phi>]]
		#<j> = -[#<out_radius> * COS[#<_line_phi>]]
		#<exit_x> = [#<_cut_current_x> + #<i> - #<j>]
		#<exit_y> = [#<_cut_current_y> + #<i> + #<j>]
		#<exit_dir> = 2
	o26 endif

	o21 if [#<exit_dir> GE 1]
		o<dbg00> if [#<debug>]
			(print,lead_out result : dir = #<exit_dir>,  X#<exit_x>, Y#<exit_y>,  I#<i>, J#<j>,  compensation = #<cmp>)
		o<dbg00> endif
		G#<exit_dir> X#<exit_x> Y#<exit_y> I#<i> J#<j>
	o21 elseif [#<debug>]
		(print,*** no action from "lead_out" CALL ***)
	o21 endif

o<lead_out> endsub
