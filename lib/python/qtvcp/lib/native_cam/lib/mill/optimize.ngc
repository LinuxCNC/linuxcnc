o<optimize> sub
(author : Fernand Veilleux)
(re-view all the control points of a figure and insert new points as needed)
(CALL src[1] compensation,option[2] dir[3] stepover[4]) ; stepover is in unit not percent

	o2010 if [#<_tool_dynamic_dia> GT 0.0]
		#<tool_dia> = #<_tool_dynamic_dia>
	o2010 else
		#<tool_dia> = #5410
	o2010 endif

	o1 if [#<tool_dia> EQ 0]
;		(print,)
;		(print,can not optimize : no tool selected or tool diameter not defined)
		o<optimize> return
	o1 endif
	
	o16 if [#2 LE 1] (inside or pocket)
		o17 if [#3 EQ 2]
			#<comp> = 42
		o17 else
			#<comp> = 41
		o17 endif

	o16 elseif [#2 EQ 2] (on the line)
			#<comp> = 40

	o16 elseif [#2 EQ 3] (outside)
		o18 if [#3 EQ 2]
			#<comp> = 41
		o18 else
			#<comp> = 42
		o18 endif
	o16 endif

	#<src>       = #1
	#<src_count> = #[#1]
	#<dest>      = [#1 + #<src_count> * 8] (work destination; 8 = length of record)
	#[#<dest>]   = 0
	#<counter>   = 0 (loop counter)

	#<tool_radius>   = [#<tool_dia> / 2]
	#<ramp_down_len> = [#<tool_dia> / #<_ramp_down_ratio> * #<_depth_step>]
	
	o<get_min> CALL [42] [2] [#4] [#<tool_dia>]
	#<step_ovr>  = #4; [#<_depth_step> / #<_ramp_down_ratio>]
	#<so_factor> = [#42 / #<tool_dia>]
	
;	(print,)
;	(print,src count = #<src_count>)
;	(print,ramp_down_len = #<ramp_down_len>  so_factor = #<so_factor>  step_ovr = #<step_ovr>  tool_rad = #<tool_radius>)
o<optimize> return

	#<from_x> = 0
	#<from_y> = 0
	o10 while [#<counter> LE #<src_count>]
		(optimizing)
		#<to_x> = 1
		#<to_y> = 0
		#<to_dir> = 1
		#<cx> = 0
		#<cy> = 0
		
		
		
		o11 if [cur dir EQ 1]
			o110 if [to_dir EQ 1]


			o110 else (to_dir == 2 or 3)

			o110 endif

		o11 else (cur dir == 2 or 3)
			o120 if [to_dir EQ 1]


			o120 else (to_dir == 2 or 3)

			o120 endif
		o11 endif

		(copy to dest)
		o<add_mill_data> CALL [#<dest>] [x2] [y3] [dir4] [c_x5] [cy6] [length7] [feed8] [speed9]

		(add to counter)
		#<src_counter> = [#<src_counter> + 1]
	o10 endwhile

	
	(copy back to src)
	#<count> = 0
	#<opt_counter> = #[#<dest>]
	o50 while [#<count> LE #<opt_counter>]
;		o<add_mill_data> CALL [#<src>]

		#<count> = [#<count> + 1]
	o50 endwhile

	
		
;		o<loop00_1> if [#<s_dir> EQ 1] (a line...)
;			o<loop00_11> if [#<next_dir> EQ 1]
;				(print,   a line followed by a line)
;				o<angle> CALL [#<from_x>] [#<from_y>] [#<to_x>] [#<to_y>] [#<next_x>] [#<next_y>] [1]
;				#<temp> = [[#<tool_rad> - #42] / #<tool_rad>]
;				(print,temp = #<temp>)
;				#<tool_eng> = [[[COS[ASIN[#<temp>] + #<_angle_angle>] * #<tool_rad>] + #<tool_rad>]]
;				(print,tool_eng = #<tool_eng>)
;				#<temp> = [#<tool_eng> / #<tool_rad> / 2]
;				(print,real engagement = #<temp>)
;				o<if03> if [#<lines_len> LE #48] 
;					o<if04> if [#48 LE #<_angle_len21>]
				
;			o<loop00_11> else
;				(print,   a line followed by an arc)
;				#<next_cx> = #[#<ori_pointer> + 11 + #<off_cx>]
;				#<next_cy> = #[#<ori_pointer> + 11 + #<off_cy>]
;				o<angle> CALL [#<from_x>] [#<from_y>] [#<to_x>] [#<to_y>] [#<next_cx>] [#<next_cy>] [1]
;				#<L_1> = [SIN[#<_angle_angle>] * #<_angle_len23>]
;				#<L_2> = [#<L_1> - #<tool_rad>]
;				(print,L_1,L_2   #<L_1>, #<L_2>)
;				#<angle_1> = [ACOS[#<L_2>] / [#<_angle_len23> - #<tool_rad>]]
;				(print,angle_1 = #<angle_1>)

;	l = L - rayon de l'outil
;	angle 1 =  acos(l / (rayon arc - rayon outil))
;					(print,step_ovr = #<step_ovr>)
;					#<radius_1> = [#<_angle_len23> - #<step_ovr>]
;					#<radius_2> = [#<_angle_len23> - #<tool_rad>]
;					(print,radiuses 1,2 = #<radius_1>,  #<radius_2>)
;					#<angle_2>  = ACOS[[#<radius_1> * #<radius_1> + #<radius_2> * #<radius_2> - #<tool_rad> * #<tool_rad>] / [2 * #<radius_1> * #<radius_2>]]
;					(print,angle 2 = #<angle_2>)
	
;	angle C = acos(((rayon de arc - engagement)² + (rayon de l'arc - rayon outil)² − rayon outil²) / 2(rayon de arc - engagement)(rayon de l'arc - rayon outil))
;	angle = angle C + angle B
;					#<tool_eng> = [[#<L_1> - [COS[#<angle_1> + #<angle_2>] * #<radius_1>]] / [#<tool_rad> * 2]]
;	engagement max = (L - ((cos(angle) * (rayon de arc - engagement))) / (tool radius * 2))
			

o<optimize> endsub
